env:
  KUBECONFIG: /tmp/github-ci.kubeconfig
  REGISTRY: registry.lab-cloudscale-rma-0.appuio.cloud
  TEST_DOMAIN: apps.lab-cloudscale-rma-0.appuio.cloud
jobs:
  build:
    environment: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: ./.github/actions/setup
      with:
        KUBECONFIG_DATA: "${{ secrets.KUBECONFIG_TEST }}"
    - env:
        NEWLINE: |2+

      name: Helm Chart preview
      run: |
        jq -n '.env=env' > env.yaml
        jq 'select(.!=null)|{vars:.,env:.}' > vars.yaml <<'EOF' ${{ env.NEWLINE }}${{ toJson(vars) }}${{ env.NEWLINE }}EOF
        jq 'select(.!=null)|{secrets:.,env:.}' > secrets.yaml <<'EOF' ${{ env.NEWLINE }}${{ toJson(secrets) }}${{ env.NEWLINE }}EOF
        cp "${KUBECONFIG}" ".github-ci.kubeconfig"
        docker run -v "${PWD}:/data" -w /data ghcr.io/appuio/helm:latest /bin/bash -c "cp .github-ci.kubeconfig /tmp/github-ci.kubeconfig; chmod 400 /tmp/github-ci.kubeconfig; /bin/helm dependency update .; HELM_DIFF_USE_UPGRADE_DRY_RUN=true /bin/helm diff upgrade 'test' . --namespace '${NAMESPACE}' --values "values.yaml" --values "env.yaml" --values vars.yaml --values secrets.yaml --kubeconfig /tmp/github-ci.kubeconfig --allow-unreleased"
    - env:
        NEWLINE: |2+

      name: Helm Chart deploy
      run: |
        jq -n '.env=env' > env.yaml
        jq 'select(.!=null)|{vars:.,env:.}' > vars.yaml <<'EOF' ${{ env.NEWLINE }}${{ toJson(vars) }}${{ env.NEWLINE }}EOF
        jq 'select(.!=null)|{secrets:.,env:.}' > secrets.yaml <<'EOF' ${{ env.NEWLINE }}${{ toJson(secrets) }}${{ env.NEWLINE }}EOF
        cp "${KUBECONFIG}" ".github-ci.kubeconfig"
        docker run -v "${PWD}:/data" -w /data ghcr.io/appuio/helm:latest /bin/bash -c "cp .github-ci.kubeconfig /tmp/github-ci.kubeconfig; chmod 400 /tmp/github-ci.kubeconfig; /bin/helm dependency update .; /bin/helm upgrade --install 'test' . --namespace '${NAMESPACE}' --values "values.yaml" --values "env.yaml" --values vars.yaml --values secrets.yaml --kubeconfig /tmp/github-ci.kubeconfig"
name: Build and deploy to test
"on":
  push:
    branches:
    - main
  workflow_dispatch: {}
